{"version":3,"sources":["db/drag-drop.js"],"names":["window","addEventListener","container","document","getElementById","fileInput","uploadButton","clearButton","downloadButton","deleteButton","dlAnchorElem","ondragover","ondragenter","e","preventDefault","onmouseenter","classList","add","onmouseleave","remove","ondrop","onchange","dataTransfer","files","length","textContent","item","name","onclick","click","innerText","file","type","reader","FileReader","onload","text","srcElement","result","fetch","Request","encodeURI","method","body","then","res","ok","status","statusText","url","json","data","message","catch","err","readAsText","slice","value","dataStr","encodeURIComponent","JSON","stringify","query","setAttribute"],"mappings":"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","file":"drag-drop.b3f6dc34.map","sourceRoot":"../src","sourcesContent":["window.addEventListener('load', () => {\n    const container = document.getElementById('drop-zone');\n    const fileInput = document.getElementById('file');\n    const uploadButton = document.getElementById('upload');\n    const clearButton = document.getElementById('clear');\n    const downloadButton = document.getElementById('download');\n    const deleteButton = document.getElementById('delete');\n    const dlAnchorElem = document.getElementById('downloadAnchorElem');\n\n    // intialize drag and drop zone\n    container.ondragover = container.ondragenter = e => {\n        e.preventDefault();\n    };\n\n    container.onmouseenter = () => {\n        container.classList.add('mouse-over');\n    };\n\n    container.onmouseleave = () => {\n        container.classList.remove('mouse-over');\n    };\n\n    // reuse the same function for file input field change and zone drop events\n    container.ondrop = fileInput.onchange = e => {\n        if (e.dataTransfer) {\n            fileInput.files = e.dataTransfer.files;\n        }\n        if (fileInput.files.length) {\n            container.textContent = `Received ${\n                fileInput.files.item(fileInput.files.length - 1).name\n            }`;\n        }\n        e.preventDefault();\n    };\n\n    // trigger file browsing on click of the zone\n    container.onclick = () => {\n        fileInput.click();\n    };\n\n    // attempt to upload the file. NOTE only the last file is used, if multiple files are droped.\n    uploadButton.onclick = () => {\n        if (!fileInput.files.length) {\n            document.getElementById('result').innerText =\n                'Please supply a file before attempting an upload.';\n            return;\n        }\n\n        const file = fileInput.files.item(fileInput.files.length - 1);\n\n        if (file.type !== 'application/json') {\n            document.getElementById('result').innerText =\n                'Only JSON files are accepted as valid upload target.';\n            return;\n        }\n\n        const reader = new FileReader();\n\n        // This fires after the blob has been read/loaded.\n        reader.onload = e => {\n            const text = e.srcElement.result;\n\n            fetch(\n                new Request(encodeURI('/data/upload'), {\n                    method: 'POST',\n                    body: text,\n                })\n            )\n                .then(res => {\n                    if (!res.ok) {\n                        throw `${res.status}. ${res.statusText} for ${res.url}`;\n                    }\n                    return res.json();\n                })\n                .then(data => {\n                    if (!data.ok) {\n                        throw `Unable to upload. ${data.message}`;\n                    }\n                    document.getElementById('result').innerText =\n                        'Succesfully uploaded.';\n                })\n                .catch(err => {\n                    document.getElementById('result').innerText = err;\n                });\n        };\n\n        // Start reading the blob as text.\n        reader.readAsText(file.slice());\n    };\n\n    // clear file input field from any files\n    clearButton.onclick = () => {\n        fileInput.value = '';\n        container.textContent = 'Drop files here...';\n    };\n\n    // attempt to download database schema into a json file\n    downloadButton.onclick = () => {\n        fetch(\n            new Request(encodeURI('/data/download'), {\n                method: 'GET',\n                body: null,\n            })\n        )\n            .then(res => {\n                if (!res.ok) {\n                    throw `${res.status}. ${res.statusText} for ${res.url}`;\n                }\n                return res.json();\n            })\n            .then(data => {\n                if (!data.ok) {\n                    throw `Unable to download. ${data.message}`;\n                }\n                document.getElementById('result').innerText =\n                    'Successfully downloaded.';\n                const dataStr =\n                    'data:text/json;charset=utf-8,' +\n                    encodeURIComponent(JSON.stringify(data.query));\n\n                dlAnchorElem.setAttribute('href', dataStr);\n                dlAnchorElem.setAttribute('download', 'db.json');\n                dlAnchorElem.click();\n            })\n            .catch(err => {\n                document.getElementById('result').innerText = err;\n            });\n    };\n\n    deleteButton.onclick = () => {\n        fetch(\n            new Request(encodeURI('/data/reset'), {\n                method: 'DELETE',\n                body: null,\n            })\n        )\n            .then(res => {\n                if (!res.ok) {\n                    throw `${res.status}. ${res.statusText} for ${res.url}`;\n                }\n                return res.json();\n            })\n            .then(data => {\n                if (!data.ok) {\n                    throw `Unable to reset. ${data.message}`;\n                }\n                document.getElementById('result').innerText =\n                    'Succesfully deleted.';\n            })\n            .catch(err => {\n                document.getElementById('result').innerText = err;\n            });\n    };\n});\n"]}